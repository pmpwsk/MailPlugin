namespace uwap.WebFramework.Plugins;

public partial class MailPlugin : Plugin
{
	public override byte[]? GetFile(string relPath, string pathPrefix, string domain)
		=> relPath switch
		{
			"/forward.js" => System.Text.Encoding.UTF8.GetBytes($"async function Quote() {{\r\n    let response = await fetch(\"/api{pathPrefix}/forward/quote?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\") + \"&everything=\" + document.querySelector(\"#everything\").checked);\r\n    if (response.status === 200) {{\r\n        window.location.assign(\"{pathPrefix}/send?mailbox=\" + GetQuery(\"mailbox\"));\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Original() {{\r\n    let send = document.querySelector('#send');\r\n    send.innerText = \"Sending...\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/forward/original?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\") + \"&info=\" + document.querySelector(\"#info\").checked + \"&to=\" + encodeURIComponent(document.querySelector(\"#to\").value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text.startsWith(\"message=\")) {{\r\n                window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=Sent&\" + text);\r\n                return;\r\n            }} else {{\r\n                switch (text) {{\r\n                    case \"invalid-to\":\r\n                        ShowError(\"Enter at least one recipient.\");\r\n                        break;\r\n                    default:\r\n                        ShowError(\"Connection failed.\");\r\n                        break;\r\n                }}\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    send.innerText = \"Send\";\r\n}}"),
			"/icon-red.ico" => (byte[]?)PluginFiles_ResourceManager.GetObject("File0"),
			"/icon-red.png" => (byte[]?)PluginFiles_ResourceManager.GetObject("File1"),
			"/icon-red.svg" => (byte[]?)PluginFiles_ResourceManager.GetObject("File2"),
			"/icon.ico" => (byte[]?)PluginFiles_ResourceManager.GetObject("File3"),
			"/icon.png" => (byte[]?)PluginFiles_ResourceManager.GetObject("File4"),
			"/icon.svg" => (byte[]?)PluginFiles_ResourceManager.GetObject("File5"),
			"/manage-mailbox.js" => System.Text.Encoding.UTF8.GetBytes($"async function Add() {{\r\n    let username = document.querySelector(\"#username\");\r\n    if (username.value === \"\") {{\r\n        ShowError(\"Enter a username.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/add-access?mailbox=\" + GetQuery(\"mailbox\") + \"&username=\" + encodeURIComponent(username.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text == \"invalid\") {{\r\n                ShowError(\"Invalid username.\");\r\n            }} else if (text == \"exists\") {{\r\n                ShowError(\"This user already has access.\");\r\n            }} else if (text == \"ok\") {{\r\n                window.location.reload();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Remove(id) {{\r\n    let response = await fetch(\"/api{pathPrefix}/remove-access?mailbox=\" + GetQuery(\"mailbox\") + \"&id=\" + encodeURIComponent(id));\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        if (text == \"ok\") {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Delete() {{\r\n    let deleteText = document.querySelector(\"#deleteButton\").firstElementChild;\r\n    if (deleteText.textContent === \"Delete mailbox\") {{\r\n        deleteText.textContent = \"Delete everything?\";\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/delete-mailbox?mailbox=\" + GetQuery(\"mailbox\"));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text == \"ok\") {{\r\n                window.location.assign(\"{pathPrefix}/manage\");\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nfunction GetQuery(q) {{\r\n    try {{\r\n        let query = new URLSearchParams(window.location.search);\r\n        if (query.has(q)) {{\r\n            return query.get(q);\r\n        }} else {{\r\n            return \"\";\r\n        }}\r\n    }} catch {{\r\n        return \"\";\r\n    }}\r\n}}"),
			"/manage.js" => System.Text.Encoding.UTF8.GetBytes($"async function Create() {{\r\n    let address = document.querySelector(\"#address\");\r\n    if (address.value === \"\") {{\r\n        ShowError(\"Enter an address.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/create-mailbox?address=\" + encodeURIComponent(address.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text == \"format\") {{\r\n                ShowError(\"Invalid format.\");\r\n            }} else if (text == \"exists\") {{\r\n                ShowError(\"Another mailbox with this address already exists.\");\r\n            }} else if (text.startsWith(\"{pathPrefix}/manage?mailbox=\")) {{\r\n                window.location.assign(text);\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
			"/manifest.json" => System.Text.Encoding.UTF8.GetBytes($"{{\r\n  \"name\": \"Mail ({Parsers.DomainMain(domain)})\",\r\n  \"short_name\": \"Mail\",\r\n  \"start_url\": \"{(pathPrefix == "" ? "/" : pathPrefix)}\",\r\n  \"display\": \"minimal-ui\",\r\n  \"background_color\": \"#000000\",\r\n  \"theme_color\": \"#202024\",\r\n  \"orientation\": \"portrait-primary\",\r\n  \"icons\": [\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.svg\",\r\n      \"type\": \"image/svg+xml\",\r\n      \"sizes\": \"any\"\r\n    }},\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.png\",\r\n      \"type\": \"image/png\",\r\n      \"sizes\": \"512x512\"\r\n    }},\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.ico\",\r\n      \"type\": \"image/x-icon\",\r\n      \"sizes\": \"16x16 24x24 32x32 48x48 64x64 72x72 96x96 128x128 256x256\"\r\n    }}\r\n  ],\r\n  \"launch_handler\": {{\r\n    \"client_mode\": \"navigate-new\"\r\n  }},\r\n  \"related_applications\": [\r\n    {{\r\n      \"platform\": \"webapp\",\r\n      \"url\": \"{pathPrefix}/manifest.json\"\r\n    }}\r\n  ],\r\n  \"offline_enabled\": false,\r\n  \"omnibox\": {{\r\n    \"keyword\": \"mail\"\r\n  }},\r\n  \"version\": \"0.1.1\"\r\n}}\r\n"),
			"/message.js" => System.Text.Encoding.UTF8.GetBytes($"async function Delete() {{\r\n    let deleteText = document.querySelector(\"#deleteButton\");\r\n    if (deleteText.textContent === \"Delete\") {{\r\n        deleteText.textContent = \"Delete?\";\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/delete-message?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\"));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text == \"ok\") {{\r\n                window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\"));\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Unread() {{\r\n    let response = await fetch(\"/api{pathPrefix}/unread?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\"))\r\n    if (response.status === 200) {{\r\n        window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\"));\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Reply() {{\r\n    let response = await fetch(\"/api{pathPrefix}/reply?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\"));\r\n    if (response.status === 200) {{\r\n        window.location.assign(\"{pathPrefix}/send?mailbox=\" + GetQuery(\"mailbox\"));\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function FindOriginal(encodedMessageId) {{\r\n    let b = document.querySelector(\"#find\");\r\n    b.textContent = \"finding...\";\r\n    let response = await fetch(\"/api{pathPrefix}/find?mailbox=\" + GetQuery(\"mailbox\") + \"&id=\" + encodedMessageId);\r\n    b.textContent = \"find\";\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        if (text.startsWith(\"mailbox=\")) {{\r\n            window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?\" + text);\r\n            return;\r\n        }}\r\n        else if (text === \"no\") {{\r\n            ShowError(\"The original message was deleted or the sender did something wrong.\");\r\n            return;\r\n        }}\r\n    }}\r\n    ShowError(\"Connection failed.\");\r\n}}"),
			"/move.js" => System.Text.Encoding.UTF8.GetBytes($"async function Move(n) {{\r\n    let response = await fetch(\"/api{pathPrefix}/move?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + GetQuery(\"folder\") + \"&message=\" + GetQuery(\"message\") + \"&new=\" + n)\r\n    if (response.status === 200) {{\r\n        window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + n);\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
			"/query.js" => (byte[]?)PluginFiles_ResourceManager.GetObject("File6"),
			"/send-attachments.js" => System.Text.Encoding.UTF8.GetBytes($"async function Upload() {{\n    let files = document.getElementById(\"update-file\").files;\n    if (files.length === 0) {{\n        ShowError(\"Select a file!\");\n        return;\r\n    }}\n    let file = files[0];\n    if (file.size > 10485760) {{\n        ShowError(\"This file is too large! (limit: 10MB)\");\r\n        return;\r\n    }}\n    let form = new FormData();\n    form.append(\"file\", file);\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", \"{pathPrefix}/upload-attachment?mailbox=\" + GetQuery(\"mailbox\"));\n    request.upload.addEventListener(\"progress\", event => {{\n        document.querySelector(\"#uploadButton\").innerText = ((event.loaded / event.total) * 100).toFixed(2) + \"%\";\n    }});\n    request.onreadystatechange = () => {{\n        if (request.readyState == 4) {{\n            document.querySelector(\"#uploadButton\").innerText = \"Add\";\n            switch (request.status) {{\n                case 200:\n                    window.location.reload();\r\n                    break;\r\n                case 413:\r\n                    ShowError(\"This file is too large! (limit: 10MB)\");\r\n                    break;\r\n                default:\n                    ShowError(\"Connection failed.\");\n                    break;\n            }}\n        }}\n    }};\n    request.send(form);\n}}\n\nasync function Delete(attachmentId) {{\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/delete-attachment?mailbox=\" + GetQuery(\"mailbox\") + \"&attachment=\" + attachmentId);\r\n        if (response.status === 200) {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
			"/send-contacts.js" => System.Text.Encoding.UTF8.GetBytes($"async function AddContact(email) {{\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/draft/add-recipient?mailbox=\" + GetQuery(\"mailbox\") + \"&email=\" + email);\r\n        if (response.status === 200) {{\r\n            window.location.assign(\"{pathPrefix}/send?mailbox=\" + GetQuery(\"mailbox\"));\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nfunction Search() {{\r\n    let searchValue = document.querySelector(\"#search\").value;\r\n    let searchQuery = GetQuery(\"search\");\r\n    if (searchQuery === \"null\")\r\n        searchQuery = \"\";\r\n    if (searchValue === searchQuery)\r\n        return;\r\n    if (searchValue === \"\")\r\n        window.location.assign(\"{pathPrefix}/send/contacts?mailbox=\" + GetQuery(\"mailbox\"));\r\n    else window.location.assign(\"{pathPrefix}/send/contacts?mailbox=\" + GetQuery(\"mailbox\") + \"&search=\" + searchValue);\r\n}}"),
			"/send-preview.js" => System.Text.Encoding.UTF8.GetBytes($"let send = document.querySelector('#send');\r\n\r\nasync function Send() {{\r\n    send.innerText = \"Sending...\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/send-draft?mailbox=\" + GetQuery(\"mailbox\"));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text.startsWith(\"message=\")) {{\r\n                window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=Sent&\" + text);\r\n                return;\r\n            }} else {{\r\n                switch (text) {{\r\n                    case \"invalid-to\":\r\n                        ShowError(\"Enter at least one recipient.\");\r\n                        break;\r\n                    case \"invalid-subject\":\r\n                        ShowError(\"Enter a subject.\");\r\n                        break;\r\n                    case \"invalid-text\":\r\n                        ShowError(\"Enter a message.\");\r\n                        break;\r\n                    default:\r\n                        ShowError(\"Connection failed.\");\r\n                        break;\r\n                }}\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    send.innerText = \"Send\";\r\n}}"),
			"/send.js" => System.Text.Encoding.UTF8.GetBytes($"let ch = 0;\r\nlet send = document.querySelector('#send');\r\nlet ta = document.querySelector('#text');\r\nlet subject = document.querySelector('#subject');\r\nlet to = document.querySelector('#to');\r\nlet error = document.querySelector(\"#error\");\r\nlet e1 = document.querySelector('#e1');\r\nlet e2 = document.querySelector('#e2');\r\nlet e3 = document.querySelector('#e3');\r\nlet e4 = document.querySelector('#e4');\r\nlet sidebar = document.querySelector('.sidebar');\r\nlet full = document.querySelector('.full');\r\nlet save = document.querySelector('#save');\r\nlet discard = document.querySelector('#discard');\r\nwindow.onresize = Resize;\r\nta.onclick = Refocus;\r\nResize();\r\ndocument.addEventListener('keydown', e => {{\r\n    if (e.ctrlKey && e.key === 's') {{\r\n        e.preventDefault();\r\n        Save();\r\n    }}\r\n}});\r\n\r\nfunction Resize() {{\r\n    let fullComp = window.getComputedStyle(full);\r\n    let erComp = window.getComputedStyle(error);\r\n    let e1Comp = window.getComputedStyle(e1);\r\n    let e2Comp = window.getComputedStyle(e2);\r\n    let e3Comp = window.getComputedStyle(e3);\r\n    let e4Comp = window.getComputedStyle(e4);\r\n    let newHeightFloat = window.visualViewport.height - (parseFloat(e2Comp['marginTop']) * 3) - parseFloat(e1Comp['height']) - parseFloat(e2Comp['height']) - parseFloat(e4Comp['height']) - parseFloat(e3Comp['marginTop']) - parseFloat(fullComp['paddingTop']) - parseFloat(fullComp['paddingBottom']);\r\n    if (erComp['display'] !== \"none\")\r\n        newHeightFloat = newHeightFloat - parseFloat(e2Comp['marginTop']) - parseFloat(erComp['height']);\r\n    e3.style.flex = '1';\r\n    e3.style.height = newHeightFloat + 'px';\r\n    Refocus();\r\n}}\r\n\r\nfunction Refocus() {{\r\n    let nh = ta.clientHeight;\r\n    if (ch > nh && document.activeElement === ta) {{\r\n        ta.blur();\r\n        ta.focus();\r\n    }}\r\n    ch = nh;\r\n}}\r\n\r\nasync function GoToAttachments() {{\r\n    if (await Save()) {{\r\n        window.location.assign(\"{pathPrefix}/send/attachments?mailbox=\" + GetQuery(\"mailbox\"));\r\n    }}\r\n}}\r\n\r\nasync function GoToPreview() {{\r\n    if (await Save()) {{\r\n        window.location.assign(\"{pathPrefix}/send/preview?mailbox=\" + GetQuery(\"mailbox\"));\r\n    }}\r\n}}\r\n\r\nasync function GoToContacts() {{\r\n    if (await Save()) {{\r\n        window.location.assign(\"{pathPrefix}/send/contacts?mailbox=\" + GetQuery(\"mailbox\"));\r\n    }}\r\n}}\r\n\r\nasync function Save() {{\r\n    save.innerText = \"Saving...\";\r\n    save.className = \"green\";\r\n    try {{\r\n        let url = \"{pathPrefix}/save-draft?mailbox=\" + GetQuery(\"mailbox\");\r\n        if (subject != null)\r\n            url = url + \"&to=\" + encodeURIComponent(to.value) + \"&subject=\" + encodeURIComponent(subject.value)\r\n        let response = await fetch(url, {{ method: \"POST\", body: ta.value }});\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            switch (text) {{\r\n                case \"ok\":\r\n                    save.innerText = \"Saved!\";\r\n                    save.className = \"\";\r\n                    return true;\r\n                    break;\r\n                case \"invalid-to\":\r\n                    ShowError(\"Invalid recipient(s).\");\r\n                    break;\r\n                default:\r\n                    ShowError(\"Connection failed.\");\r\n                    break;\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n    return false;\r\n}}\r\n\r\nasync function Discard() {{\r\n    try {{\r\n        if (discard.innerText === \"Discard\") {{\r\n            discard.innerText = \"Discard?\";\r\n            return;\r\n        }}\r\n        let response = await fetch(\"/api{pathPrefix}/delete-draft?mailbox=\" + GetQuery(\"mailbox\"));\r\n        if (response.status === 200) {{\r\n            window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\"));\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nfunction MessageChanged() {{\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n}}\r\n\r\nasync function Send() {{\r\n    send.innerText = \"Sending...\";\r\n    if (await Save()) {{\r\n        try {{\r\n            let response = await fetch(\"/api{pathPrefix}/send-draft?mailbox=\" + GetQuery(\"mailbox\"));\r\n            if (response.status === 200) {{\r\n                let text = await response.text();\r\n                if (text.startsWith(\"message=\")) {{\r\n                    window.location.assign(\"{(pathPrefix == "" ? "/" : pathPrefix)}?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=Sent&\" + text);\r\n                    return;\r\n                }} else {{\r\n                    switch (text) {{\r\n                        case \"invalid-to\":\r\n                            ShowError(\"Enter at least one recipient.\");\r\n                            break;\r\n                        case \"invalid-subject\":\r\n                            ShowError(\"Enter a subject.\");\r\n                            break;\r\n                        case \"invalid-text\":\r\n                            ShowError(\"Enter a message.\");\r\n                            break;\r\n                        default:\r\n                            ShowError(\"Connection failed.\");\r\n                            break;\r\n                    }}\r\n                }}\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} catch {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n    send.innerText = \"Send\";\r\n}}\r\n\r\nfunction ShowError(message) {{\r\n    error.firstElementChild.innerText = message;\r\n    error.style.display = \"block\";\r\n    Resize();\r\n}}\r\n\r\nfunction HideError() {{\r\n    error.style.display = \"none\";\r\n    Resize();\r\n}}\r\n"),
			"/settings-auth.js" => System.Text.Encoding.UTF8.GetBytes($"let save = document.querySelector(\"#save\");\r\n\r\nfunction Changed() {{\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n}}\r\n\r\nasync function Save() {{\r\n    save.innerText = \"Saving...\";\r\n    save.className = \"green\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/set-auth?mailbox=\" + GetQuery(\"mailbox\")\r\n            + \"&connection-secure=\" + document.querySelector(\"#connection-secure\").checked\r\n            + \"&connection-ptr=\" + document.querySelector(\"#connection-ptr\").checked\r\n            + \"&spf-min=\" + document.querySelector(\"#spf-min\").value\r\n            + \"&dkim-min=\" + document.querySelector(\"#dkim-min\").value\r\n            + \"&dmarc-enough=\" + document.querySelector(\"#dmarc-enough\").checked\r\n            + \"&dmarc-min=\" + document.querySelector(\"#dmarc-min\").value\r\n        );\r\n        if (response.status === 200) {{\r\n            save.innerText = \"Saved!\";\r\n            save.className = \"\";\r\n            return;\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n    return false;\r\n}}"),
			"/settings-contacts-edit.js" => System.Text.Encoding.UTF8.GetBytes($"let save = document.querySelector(\"#save\");\r\nlet del = document.querySelector(\"#del\");\r\n\r\nfunction Changed() {{\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n}}\r\n\r\nasync function Save() {{\r\n    save.innerText = \"Saving...\";\r\n    save.className = \"green\";\r\n    try {{\r\n        let name = document.querySelector(\"#name\");\r\n        let favorite = document.querySelector(\"#favorite\");\r\n        if (name.value === \"\")\r\n            ShowError(\"Enter a name!\");\r\n        else {{\r\n            let response = await fetch(\"/api{pathPrefix}/contacts/set?mailbox=\" + GetQuery(\"mailbox\") + \"&email=\" + encodeURIComponent(GetQuery(\"email\")) + \"&name=\" + encodeURIComponent(name.value) + \"&favorite=\" + favorite.checked);\r\n            switch (response.status) {{\r\n                case 200:\r\n                    save.innerText = \"Saved!\";\r\n                    save.className = \"\";\r\n                    window.location.assign(\"{pathPrefix}/settings/contacts?mailbox=\" + GetQuery(\"mailbox\"));\r\n                    return;\r\n                default:\r\n                    ShowError(\"Connection failed.\");\r\n                    break;\r\n            }}\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    save.innerText = \"Save\";\r\n    save.className = \"green\";\r\n    return;\r\n}}\r\n\r\nasync function Delete() {{\r\n    try {{\r\n        if (del.innerText == \"Delete\")\r\n            del.innerText = \"Delete?\";\r\n        else {{\r\n            let response = await fetch(\"/api{pathPrefix}/contacts/delete?mailbox=\" + GetQuery(\"mailbox\") + \"&email=\" + encodeURIComponent(GetQuery(\"email\")));\r\n            if (response.status === 200)\r\n                window.location.assign(\"{pathPrefix}/settings/contacts?mailbox=\" + GetQuery(\"mailbox\"));\r\n            else ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
			"/settings-contacts.js" => System.Text.Encoding.UTF8.GetBytes($"async function Add() {{\r\n    try {{\r\n        let email = document.querySelector(\"#email\");\r\n        let name = document.querySelector(\"#name\");\r\n        let favorite = document.querySelector(\"#favorite\");\r\n        if (email.value === \"\")\r\n            ShowError(\"Enter an email address!\");\r\n        else if (name.value === \"\")\r\n            ShowError(\"Enter a name!\");\r\n        else {{\r\n            let response = await fetch(\"/api{pathPrefix}/contacts/set?mailbox=\" + GetQuery(\"mailbox\") + \"&email=\" + encodeURIComponent(email.value) + \"&name=\" + encodeURIComponent(name.value) + \"&favorite=\" + favorite.checked);\r\n            switch (response.status) {{\r\n                case 200:\r\n                    email.value = \"\";\r\n                    name.value = \"\";\r\n                    favorite.checked = false;\r\n                    window.location.reload();\r\n                    break;\r\n                case 418:\r\n                    ShowError(\"Invalid email address!\");\r\n                    break;\r\n                default:\r\n                    ShowError(\"Connection failed.\");\r\n                    break;\r\n            }}\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}"),
			"/settings-folders.js" => System.Text.Encoding.UTF8.GetBytes($"async function Delete(f, id) {{\r\n    let deleteText = document.querySelector(\"#\" + id);\r\n    if (deleteText.textContent === \"Delete\") {{\r\n        deleteText.textContent = \"Delete?\";\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/delete-folder?mailbox=\" + GetQuery(\"mailbox\") + \"&folder=\" + f);\r\n        if (response.status === 200) {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}\r\n\r\nasync function Create() {{\r\n    let name = document.querySelector(\"#name\");\r\n    if (name.value === \"\") {{\r\n        ShowError(\"Enter a name!\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/create-folder?mailbox=\" + GetQuery(\"mailbox\") + \"&name=\" + encodeURIComponent(name.value));\r\n        switch (response.status) {{\r\n            case 200:\r\n                name.value = \"\";\r\n                window.location.reload();\r\n                break;\r\n            case 409:\r\n                ShowError(\"Another folder with this name already exists!\");\r\n                break;\r\n            default:\r\n                ShowError(\"Connection failed.\");\r\n                break;\r\n        }}\r\n    }}\r\n}}"),
			"/settings.js" => System.Text.Encoding.UTF8.GetBytes($"let nameInput = document.querySelector(\"#name-input\");\r\nlet nameButton = document.querySelector(\"#save-name\");\r\nlet footerInput = document.querySelector(\"#footer-input\");\r\nlet footerButton = document.querySelector(\"#save-footer\");\r\nlet externalImagesInput = document.querySelector(\"#external-images\");\r\nlet externalImagesButton = document.querySelector(\"#save-external-images\");\r\n\r\nfunction NameChanged() {{\r\n    nameButton.innerText = \"Save\";\r\n    nameButton.className = \"green\";\r\n}}\r\n\r\nasync function SaveName() {{\r\n    nameButton.innerText = \"Saving...\";\r\n    nameButton.className = \"green\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/set-name?mailbox=\" + GetQuery(\"mailbox\") + \"&name=\" + encodeURIComponent(nameInput.value));\r\n        if (response.status === 200) {{\r\n            nameButton.innerText = \"Saved!\";\r\n            nameButton.className = \"\";\r\n            return;\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    nameButton.innerText = \"Save\";\r\n    nameButton.className = \"green\";\r\n}}\r\n\r\nfunction FooterChanged() {{\r\n    footerButton.innerText = \"Save\";\r\n    footerButton.className = \"green\";\r\n}}\r\n\r\nasync function SaveFooter() {{\r\n    footerButton.innerText = \"Saving...\";\r\n    footerButton.className = \"green\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/set-footer?mailbox=\" + GetQuery(\"mailbox\") + \"&footer=\" + encodeURIComponent(footerInput.value));\r\n        if (response.status === 200) {{\r\n            footerButton.innerText = \"Saved!\";\r\n            footerButton.className = \"\";\r\n            return;\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    footerButton.innerText = \"Save\";\r\n    footerButton.className = \"green\";\r\n}}\r\n\r\nasync function SaveExternalImages() {{\r\n    externalImagesButton.innerText = \"Saving...\";\r\n    externalImagesButton.className = \"green\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/set-external-images?mailbox=\" + GetQuery(\"mailbox\") + \"&value=\" + externalImagesInput.checked);\r\n        if (response.status === 200) {{\r\n            externalImagesButton.innerText = \"Saved!\";\r\n            externalImagesButton.className = \"\";\r\n            return;\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} catch {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n    externalImagesButton.innerText = \"Save\";\r\n    externalImagesButton.className = \"green\";\r\n}}"),
			_ => null
		};
	
	public override string? GetFileVersion(string relPath)
		=> relPath switch
		{
			"/forward.js" => "1703440931000",
			"/icon-red.ico" => "1697666326000",
			"/icon-red.png" => "1697666261000",
			"/icon-red.svg" => "1697666263000",
			"/icon.ico" => "1694961189000",
			"/icon.png" => "1694960408000",
			"/icon.svg" => "1695860915000",
			"/manage-mailbox.js" => "1696097731000",
			"/manage.js" => "1694986479000",
			"/manifest.json" => "1704140890000",
			"/message.js" => "1699634738000",
			"/move.js" => "1709233008000",
			"/query.js" => "1695164090000",
			"/send-attachments.js" => "1696369030000",
			"/send-contacts.js" => "1703028546000",
			"/send-preview.js" => "1699722377000",
			"/send.js" => "1703044263000",
			"/settings-auth.js" => "1701451992000",
			"/settings-contacts-edit.js" => "1704746062000",
			"/settings-contacts.js" => "1702461693000",
			"/settings-folders.js" => "1697075750000",
			"/settings.js" => "1709504700017",
			_ => null
		};
	
	private static readonly System.Resources.ResourceManager PluginFiles_ResourceManager = new("MailPlugin.Properties.PluginFiles", typeof(MailPlugin).Assembly);
}